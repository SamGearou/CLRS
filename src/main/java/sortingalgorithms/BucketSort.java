package sortingalgorithms;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

//Bucket Sort assumes the input is drawn from a uniform distribution and has an average-case running
//time of O(n). It also assumes that the input is generated by a random process that
//distributes elements uniformly and independently over the interval [0,1)
public class BucketSort {

    //Best Case: O(n), Average: Case O(n), Worst Case: O(n^2)
    public double[] bucketSort(double[] A) {
        List<Double>[] B = new List[10];
        for (int i = 0; i < B.length; i++) {
            B[i] = new ArrayList<>();
        }
        for (int i = 0; i < A.length; i++) {
            B[(int) (10 * A[i])].add(A[i]);
        }
        for (int i = 0; i < B.length; i++) {
            Collections.sort(B[i]); //could use insertion sort, mergesort, quicksort, etc here
        }
        int ind = 0;
        double[] sortedList = new double[A.length];
        for (List<Double> list : B) {
            for (double x : list) {
                sortedList[ind++] = x;
            }
        }
        return sortedList;
    }
}
