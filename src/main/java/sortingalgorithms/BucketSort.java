package sortingalgorithms;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

//Bucket Sort assumes the input is drawn from a uniform distribution and has an average-case running
//time of O(n). It also assumes that the input is generated by a random process that
//distributes elements uniformly and independently over the interval [0,1)
public class BucketSort {
    private int maxVal;

    //Best Case: O(n), Average: Case O(n), Worst Case: O(n^2)
    //bucket sorts doubles in the range [0,1)
    public double[] bucketSort(double[] A) {
        List<Double>[] buckets = new List[10];
        for (int i = 0; i < buckets.length; i++) {
            buckets[i] = new ArrayList<>();
        }
        for (int i = 0; i < A.length; i++) {
            buckets[(int) (10 * A[i])].add(A[i]);
        }
        for (int i = 0; i < buckets.length; i++) {
            Collections.sort(buckets[i]); //could use insertion sort, mergesort, quicksort, etc here
        }
        int ind = 0;
        double[] sortedList = new double[A.length];
        for (List<Double> list : buckets) {
            for (double x : list) {
                sortedList[ind++] = x;
            }
        }
        return sortedList;
    }

    //bucket sorts integers
    public int[] bucketSort(int[] A) {
        if(A.length == 0){
            return new int[]{};
        }
        int bucketSize = (int) Math.sqrt(A.length);
        maxVal = Arrays.stream(A).max().getAsInt();
        List<Integer>[] buckets = new List[bucketSize];
        for (int i = 0; i < buckets.length; i++) {
            buckets[i] = new ArrayList<>();
        }
        for (int i = 0; i < A.length; i++) {
            buckets[hash(A[i], bucketSize)].add(A[i]);
        }
        for (List<Integer> bucket : buckets) {
            Collections.sort(bucket);
        }
        int[] sortedList = new int[A.length];
        int ind = 0;
        for (List<Integer> bucket : buckets) {
            for (int x : bucket) {
                sortedList[ind++] = x;
            }
        }
        return sortedList;
    }

    //if maxVal is 0, it is fine as long as elem is also zero, since (int) 0/0f == 0
    public int hash(int elem, int bucketSize) {
        return (int) ((double) elem / maxVal * (bucketSize - 1));
    }g
}
